@page "/management/tours/tour-groups"
@using Travaloud.Application.Catalog.Tours.Dto

@attribute [MustHavePermission(TravaloudAction.View, TravaloudResource.Tours)]

@inject IStringLocalizer<Groups> L

<TravaloudPageTitle Title="@L["Tour Groups"]" Description="@L["Manage Tour Groups."]"/>

<EntityTable @ref="_table" TEntity="TourCategoryDto" TId="Guid" TRequest="TourGroupViewModel" Context="@Context" IsWizard="true" WizardSteps="@WizardSteps">
    <WizardStep1Content>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField Label="@L["Name"]" For="@(() => context.Name)" @bind-Value="context.Name" Required="true" HelperText="Enter a Tour Group name" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12" md="6">
                <div class="d-flex" style="align-items:baseline">
                    <MudSelect T="Guid?" @bind-Value="context.ParentTourCategoryId"  For="@(() => context.ParentTourCategoryId)" Required="false" Label="Tour Category" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @if (context.ParentTourCategories != null)
                        {
                            foreach (var tourCategory in context.ParentTourCategories)
                            {
                                <MudSelectItem T="Guid?" Value="@tourCategory.Id">@tourCategory.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </div>
            </MudItem>
            <MudItem xs="12" md="12">
                <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Outlined="true">
                    <MudTabPanel Text="@L["Short Description"]">
                        <MudInputLabel Class="mb-3">@L["Short Description"]</MudInputLabel>
                        <Editor @bind-Value="context.ShortDescription" Field="@(() => context.ShortDescription)" Conf="@TinyMceConfig.Styles()" ApiKey="@TinyMceConfig.ApiKey"></Editor>
                    </MudTabPanel>
                    <MudTabPanel Text="@L["Full Description"]">
                        <MudInputLabel Class="mb-3">@L["Full Description"]</MudInputLabel>
                        <Editor @bind-Value="context.Description" Field="@(() => context.Description)" Conf="@TinyMceConfig.Styles()" ApiKey="@TinyMceConfig.ApiKey"></Editor>
                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    </WizardStep1Content>
    <WizardStep2Content>
        <MudStack>
            <MudItem xs="12" md="12">
                <div>
                    <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.CloudUpload" for="fileInput">
                        @L["Select Banner Image"]
                    </MudButton>
                    @if (Context.AddEditModal != null && !Context.AddEditModal.IsCreate && !string.IsNullOrEmpty(context.ImagePath) && string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Target="_blank"
                                   StartIcon="@Icons.Material.Filled.RemoveRedEye" Link="@(@context.ImagePath)" Style="margin-left: 5px;">
                            @L["View"]
                        </MudButton>

                        <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.Delete" OnClick="SetDeleteCurrentImageFlag" Style="margin-left: 5px;">
                            @L["Delete"]
                        </MudButton>
                    }
                    @if (!string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudButton HtmlTag="label" DisableElevation OnClick="ClearImageInBytes" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Target="_blank"
                                   StartIcon="@Icons.Material.Filled.Clear" Style="margin-left: 5px;">
                            @L["Clear"]
                        </MudButton>
                    }
                </div>
                <InputFile id="fileInput" hidden OnChange="UploadFiles"/>
            </MudItem>
            <MudItem xs="12" md="12" Class="mb-3">
                @if (!string.IsNullOrEmpty(context.ImageInBytes))
                {
                    <MudAvatar Image="@context.ImageInBytes" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
                else
                {
                    <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePath) ? string.Empty : (@context.ImagePath))" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
            </MudItem>
        </MudStack>
    </WizardStep2Content>
</EntityTable>