@page
@model Travaloud.Tenants.SharedRCL.Pages.Tour.IndexModel
@using Microsoft.AspNetCore.Mvc.TagHelpers

@if (Model.TenantId == "fuse")
{
    @section Styles {
        <style type="text/css">
            .header-banner-image-background {
                height: 60vh
            }
        </style>
    }
}
else if (Model.TenantId == "vbh")
{
    @section Styles {
        <style type="text/css">
            .tour-main-image {
                height: 400px;
                object-fit: cover;
            }

                .tour-main-image img {
                    object-fit: cover;
                }

            .badge {
                white-space: unset;
            }

            main {
                background-color: #000;
            }
        </style>
    }
}
else
{
    @section Styles {
        <style type="text/css">
            .tour-main-image {
                height: 400px;
                object-fit: cover;
            }

                .tour-main-image img {
                    object-fit: cover;
                }

            .badge {
                white-space: unset;
            }
        </style>
    }
}


@{
    if (Model.Tour != null)
    {
        if (Model.TenantId == "fuse")
        {
            <section id="headerBanner">
                @Html.DisplayFor(x => x.HeaderBanner)
            </section>

            <section id="introduction" class="bg-light">
                <div class="container-fluid">
                    <div class="container pb-8 pt-8">
                        <div class="row">
                            <div class="col-md-12 col-lg-6 mb-5 mb-lg-0 has-parallax-scroll">
                                <h1 class="display-3">@Model.Tour.Name.ToUpper()</h1>
                                @Html.Raw(Model.Tour.Description)
                            </div>
                            <div class="p-0 mt-5 mt-lg-0 col-md-12 col-lg-6 d-lg-flex align-items-center justify-content-center has-parallax-scroll d-none">
                                <div class="bg-white p-7">
                                    <div class="text-center">
                                        <h4 class="tilted mt-n7 mb-4 display-6">BOOK YOUR TOUR</h4>
                                    </div>
                                    <p><i class="fa-solid fa-clock me-2"></i> @Model.Tour.HourDuration hours</p>
                                    @if (Model.Tour.TourPrices != null && Model.Tour.TourPrices.Any())
                                    {
                                        foreach (var price in Model.Tour.TourPrices)
                                        {
                                            <p><i class="fa-solid fa-circle-dollar-to-slot me-2"></i> $@price.Price @price.Title</p>
                                        }
                                    }


                                    <div class="text-center mb-n7 mt-4">
                                        <button class="btn btn-primary" data-mdb-toggle="modal" data-mdb-target="#enquireNowModal">Enquire Now</button>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-5 mt-lg-0 col-md-12 col-lg-6 d-flex align-items-center justify-content-center has-parallax-scroll d-lg-none bg-white">
                                <div class="bg-white pt-6 pb-6">
                                    <div class="text-center">
                                        <h4 class="tilted mt-n7 mb-4 display-6">BOOK YOUR TOUR</h4>
                                    </div>
                                    <p><i class="fa-solid fa-clock me-2"></i> @Model.Tour.HourDuration hours</p>
                                    @if (Model.Tour.TourPrices != null && Model.Tour.TourPrices.Any())
                                    {
                                        foreach (var price in Model.Tour.TourPrices)
                                        {
                                            <p><i class="fa-solid fa-circle-dollar-to-slot me-2"></i> $@price.Price @price.Title</p>
                                        }
                                    }
                                </div>
                                <button class="btn btn-primary" id="tourEnquireNowMobileButton" data-mdb-toggle="modal" data-mdb-target="#enquireNowModal">Enquire Now</button>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        }
        else
        {
            <!--Section: Booking Header-->
            <div class="custom-height pt-3 pt-lg-5 mt-n5 bg-primary-dark position-relative">
                <div class="container py-5">
                    <div class="row my-4">
                        <div class="col-12 has-parallax-scroll">
                            <h1 class="display-4 fw-bold ls-tight text-white">@Model.PageTitle</h1>
                            <h4 class="mb-0 text-light opacity-50">
                                @Model.Tour.Name
                            </h4>
                        </div>

                    </div>
                </div>
            </div>

            <div class="container custom-mt">
                <div class="row g-0 mb-0 align-items-center">
                    <div class="col-lg-7 mb-0 mb-lg-0 has-parallax-scroll tour-main-image">
                        @{
                            var thumbnailImageSrc = Model.Tour.ImagePath.Replace("tr=w-1000", $"w=1000").Replace("tr=w-2000", $"w=1000").Replace($"{Model.TenantId}/", "").Replace("https://ik.imagekit.io/rqlzhe7ko/", $"https://travaloudcdn.azureedge.net/{Model.TenantId}/assets/images/").Replace("https://travaloud.azureedge.net", "https://travaloudcdn.azureedge.net").Replace("https://travaloudcdn.azureedge.net/assets/images/", $"https://travaloudcdn.azureedge.net/{Model.TenantId}/assets/images/");
                            <img src="@thumbnailImageSrc" class="w-100 rounded-6 h-100" alt="@Model.Tour.Name" />
                        }
                    </div>
                    <div class="col-lg-5 has-parallax-scroll mt-3 mt-lg-0">
                        <div class="card cascading-left rounded-6 shadow-5 has-parallax-scroll">
                            <div class="card-body px-4 p-4 p-md-5 p-lg-4 p-xl-5">
                                @{
                                    <div class="row g-0">
                                        <div class="col-lg-8">
                                            <h3 class="mb-4 float-left text-black">@Model.Tour.Name</h3>

                                        </div>
                                        <div class="col-lg-4 mb-2 mb-lg-0 text-lg-end">
                                            <button type="button" class="btn btn-primary w-100 w-lg-auto" data-mdb-toggle="modal" data-mdb-target="#enquireNowModal">
                                                Enquire now
                                            </button>
                                        </div>
                                    </div>

                                    var tripInformationValues = new List<Tuple<string, string>>();

                                    var priceExists = Model.Tour.TourPrices != null && Model.Tour.TourPrices.Any();
                                    var minCapacityExists = Model.Tour.MinCapacity.HasValue;
                                    var maxCapacityExists = Model.Tour.MaxCapacity.HasValue && Model.Tour.MaxCapacity.Value != 99999;
                                    var addressExists = !string.IsNullOrEmpty(Model.Tour.Address);
                                    var telphoneNumberExists = !string.IsNullOrEmpty(Model.Tour.TelephoneNumber);
                                    var dayDurationExists = !string.IsNullOrEmpty(Model.Tour.DayDuration);
                                    var nightDurationExists = !string.IsNullOrEmpty(Model.Tour.NightDuration);
                                    var hourDurationExists = !string.IsNullOrEmpty(Model.Tour.HourDuration);
                                    var additionalInformationExists = !string.IsNullOrEmpty(Model.Tour.AdditionalInformation);

                                    if (priceExists)
                                    {
                                        if (Model.Tour.TourPrices != null)
                                        {
                                            tripInformationValues.AddRange(Model.Tour.TourPrices.Select(price => new Tuple<string, string>("fa-money-check-dollar", $"${price.Price} {price.Title}{(price.Description != null ? $" {price.Description}" : "")}")));
                                        }
                                    }

                                    var includeTimeFrame = Model.TenantId == "uncut";

                                    if (dayDurationExists || nightDurationExists || hourDurationExists)
                                    {
                                        var duration = "";
                                        if (dayDurationExists)
                                            duration += $"{Model.Tour.DayDuration}{(includeTimeFrame ? $" Day{(Model.Tour.DayDuration != "1" ? "s" : "")}" : "")}";

                                        if (nightDurationExists)
                                            duration += $"{(dayDurationExists ? " " : "")}{Model.Tour.NightDuration}{(includeTimeFrame ? $" Night{(Model.Tour.NightDuration != "1" ? "s" : "")}" : "")}";

                                        if (hourDurationExists)
                                            duration += $"{(dayDurationExists ? " " : "")}{Model.Tour.HourDuration}{(includeTimeFrame ? $" Hour{(Model.Tour.HourDuration != "1" ? "s" : "")}" : "")}";

                                        tripInformationValues.Add(new Tuple<string, string>("fa-clock", duration));
                                    }

                                    if (minCapacityExists || maxCapacityExists)
                                    {
                                        if (minCapacityExists)
                                            tripInformationValues.Add(new Tuple<string, string>("fa-user-group", $"Min {Model.Tour.MinCapacity} persons"));

                                        if (maxCapacityExists)
                                            tripInformationValues.Add(new Tuple<string, string>("fa-user-group", $"Max {Model.Tour.MaxCapacity} persons"));
                                    }

                                    if (addressExists && Model.Tour.Address is not null)
                                        tripInformationValues.Add(new Tuple<string, string>("fa-location-pin", Model.Tour.Address));

                                    if (additionalInformationExists && Model.Tour.AdditionalInformation is not null)
                                        tripInformationValues.Add(new Tuple<string, string>("fa-circle-info", Model.Tour.AdditionalInformation));

                                    if (tripInformationValues.Count > 0)
                                    {
                                        <div class="row">
                                            @foreach (var tripInformationValue in tripInformationValues)
                                            {
                                                const string cssClass = "col-lg-12";
                                                <div class="@cssClass mb-2">
                                                    <span class="badge bg-primary-dark text-white p-2 w-100"><i class="fas @tripInformationValue.Item1 dark-grey-text" aria-hidden="true"></i> @tripInformationValue.Item2</span>
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (Model.TenantId == "vbh")
            {
                <section id="bookBanner" class="bg-black px-3 px-lg-0 pb-5 pt-5 position-relative">
                    @*@Html.DisplayFor(x => x.BookNowComponent)*@

                    <img src="https://travaloudcdn.azureedge.net/vbh/assets/images/texture-bottom.png" class="w-100 bottom-0 left-0 position-absolute" style="max-height:18px;" alt="Texture border image" />
                </section>
            }


            <section id="intro" class="container-fluid position-relative bg-white">
                <div class="container py-5">
                    <p class="text-muted mb-4">@Html.Raw(Model.Tour.Description)</p>

                    @if (!string.IsNullOrEmpty(Model.Tour.WhatsIncluded))
                    {
                        <span class="mb-2 d-block"><strong>What's Included?</strong></span>

                        @Html.Raw(Model.Tour.WhatsIncluded)
                    }

                    @if (!string.IsNullOrEmpty(Model.Tour.WhatsNotIncluded))
                    {
                        <span class="mb-2 d-block"><strong>What's not Included?</strong></span>

                        @Html.Raw(Model.Tour.WhatsNotIncluded)
                    }
                </div>
            </section>

            if (Model.Tour.TourItineraries != null && Model.Tour.TourItineraries.Any())
            {
                foreach (var itinerary in Model.Tour.TourItineraries)
                {
                    <div class="container-fluid p-0 bg-white">
                        <h3 class="text-white w-100 text-center m-0 py-2 position-relative bg-primary-dark" style="z-index:2"><strong class="has-parallax-scroll">@itinerary.Header</strong></h3>
                        <div class="container">
                            <div class="row">
                                @if (itinerary.Sections.Count() == 1)
                                {
                                    var itinerarySection = itinerary.Sections.First();
                                    var carousel = new CarouselComponent($"tourItinerarySectionImages{itinerarySection.Id.ToString().Replace("-", "")}", itinerarySection.Images.Select(i => i.ImagePath).ToList()) { TenantId = Model.TenantId };
                                    <partial name="Shared/_ItinerarySectionFullWidthPartial" model="@new TourItinerarySectionModel(itinerarySection, carousel)" />
                                }
                                else
                                {
                                    <div class="main-timeline-2 py-5">
                                        @{
                                            var alignment = "left-2";
                                            foreach (var itinerarySection in itinerary.Sections)
                                            {
                                                var carousel = new CarouselComponent($"tourItinerarySectionImages{itinerarySection.Id.ToString().Replace("-", "")}", itinerarySection.Images.Select(i => i.ImagePath).ToList()) { TenantId = Model.TenantId };

                                                <div class="timeline-2 @alignment has-parallax-scroll">
                                                    <partial name="Shared/_ItinerarySectionPartial" model="@new TourItinerarySectionModel(itinerarySection, carousel)" />
                                                </div>

                                                alignment = alignment == "left-2" ? "right-2" : "left-2";
                                            }
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            if (Model.RelatedToursCards != null)
            {
                <section id="relatedTours" class="pb-5 position-relative text-center bg-light">
                    @Html.DisplayFor(x => x.RelatedToursCards)
                </section>
            }
        }

        @Html.DisplayFor(x => x.EnquireNowComponent)

        @section Scripts {
            <script type="text/javascript">
                let tourDatesParsed = @Html.Raw(Json.Serialize(Model.Tour.TourDates?.ToList()));
                let datepickerWithFilter = document.querySelector('.datepicker-with-filter');
                let datepicker = null;

                $("document").ready(function () {
                    filterDates();
                });

                function filterDates() {
                    let tourDates = [];

                    if (tourDatesParsed.length > 0) {
                        $(tourDatesParsed).each(function (i, v) {
                            var startDate = new Date(v.startDate);
                            startDate.setHours(0, 0, 0);

                            tourDates.push(startDate.getTime());
                        });
                    }

                    const filterFunction = (date) => {
                        return $.inArray(date.getTime(), tourDates) > -1;
                    }

                    if (datepicker == null) {
                        datepicker = new mdb.Datepicker(datepickerWithFilter, { filter: filterFunction });

                        datepickerWithFilter.addEventListener('dateChange.mdb.datepicker', (e) => {
                            let selectedDate = e.date.getTime();

                            $(tourDatesParsed).each(function (i, v) {
                                let tourDate = new Date(v.startDate);
                                tourDate.setHours(0, 0, 0);

                                if (tourDate.getTime() == selectedDate) {
                                    $('#BookNowComponent_GuestQuantity').attr('max', v.availableSpaces);
                                }
                            });
                        });
                    }
                    else
                        datepicker.update({ filter: filterFunction });
                }

                function getTourDates(control) {
                    let selectedTour = $(control).val();
                    let guestQuantity = $('#BookNowComponent_GuestQuantity').val();

                    if (guestQuantity.length == 0)
                        guestQuantity = 1;

                    postAjax("GetTourDates", { "TourId": selectedTour, "GuestQuantity": guestQuantity }, function (result) {
                        tourDatesParsed = result.tourDates;
                        filterDates();
                    });
                }
            </script>
        }
    }
}


