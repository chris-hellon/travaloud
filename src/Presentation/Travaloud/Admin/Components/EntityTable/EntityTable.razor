@typeparam TEntity
@typeparam TId
@using Travaloud.Infrastructure.Common
@using Microsoft.Extensions.Localization
@typeparam TRequest

@inject IJSRuntime JS
@inject IStringLocalizer<SharedResource> L

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<ErrorBoundary>
    <ChildContent>

        @if (_canSearch && (Context.AdvancedSearchEnabled || AdvancedSearchContent is not null))
        {
            var searchClass = "mud-elevation-@Elevation";

            <MudExpansionPanel @bind-IsExpanded="ExpandAdvancedSearch"
                               Style="padding:10px!important; margin-bottom:10px!important;border-radius: var(--mud-default-borderradius) !important;"
                               Class="@searchClass" Text="@L["Advanced Search"]" Dense="@(Elevation == 0 || Dense)">
                <MudTextField @bind-Value="SearchString" Immediate="true"
                              Placeholder="@($"{L["Search for"]} {Context.EntityNamePlural}")" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                              Style="flex:none!important;margin:0px!important" TextChanged="OnSearchStringChanged">
                </MudTextField>
                @if (Context.AdvancedSearchEnabled)
                {
                    <div style="margin-top:10px!important">
                        <MudCheckBox Label="All Columns" T="bool" Checked="Context.AllColumnsChecked"
                                     CheckedChanged="Context.AllColumnsCheckChanged">
                        </MudCheckBox>
                        @foreach (var field in Context.Fields)
                        {
                            <MudCheckBox @bind-Checked="@field.CheckedForSearch" Label="@(field.DisplayName)"></MudCheckBox>
                        }
                    </div>
                }
                @AdvancedSearchContent

            </MudExpansionPanel>
        }

        <MudTable @ref="_table" Elevation="@Elevation" ServerData="@ServerReloadFunc" Items="@EntityList" Filter="LocalSearch"
                  Loading="@Loading" LoadingProgressColor="@Color.Secondary" ChildRowContent="@ChildRowContent" Class="mb-0"
                  Dense="@Dense">

            <ToolBarContent>
                <div class="justify-center mud-text-align-center">
                    @if (_canCreate)
                    {
                        if (LoadCreatePage())
                        {
                            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Secondary"
                                       OnClick="(() => InvokeCreatePage())" StartIcon="@Icons.Material.Filled.Add"
                                       IconColor="Color.Surface">
                                @L["Create"]
                            </MudButton>
                        }
                        else
                        {
                            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Secondary"
                                       OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add"
                                       IconColor="Color.Surface">
                                @L["Create"]
                            </MudButton>
                        }
                    }
                    @if (_canExport)
                    {
                        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Tertiary"
                                   OnClick="(() => ExportAsync())" StartIcon="@Icons.Material.Filled.ImportExport"
                                   Style="margin-left: 5px;" IconColor="Color.Surface">
                            @L["Export"]
                        </MudButton>
                    }
                    <MudButton DisableElevation Variant="Variant.Filled" OnClick="ReloadDataAsync"
                               StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Info"
                               Style="margin-left: 5px;">
                        @L["Reload"]
                    </MudButton>
                </div>
                <MudSpacer/>
                @if (_canSearch && !ExpandAdvancedSearch)
                {
                    <MudTextField @bind-Value="SearchString" Immediate="true" FullWidth="false"
                                  Placeholder="@($"{L["Search for"]} {Context.EntityNamePlural}")" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"
                                  DebounceInterval="500"
                                  OnDebounceIntervalElapsed="OnSearchStringChanged">
                    </MudTextField>
                }
            </ToolBarContent>

            <HeaderContent>
                @if (Context.Fields is not null)
                {
                    foreach (var field in Context.Fields)
                    {
                        <MudTh>
                            @if (Context.IsClientContext)
                            {
                                <MudTableSortLabel SortBy="@field.ValueFunc">@field.DisplayName</MudTableSortLabel>
                            }
                            else
                            {
                                <MudTableSortLabel T="TEntity" SortLabel="@field.SortLabel">@field.DisplayName</MudTableSortLabel>
                            }
                        </MudTh>
                    }
                }

                @if (!HideActionsColumn)
                {
                    <MudTh Style="text-align:right">@L["Actions"]</MudTh>
                }
            </HeaderContent>

            <RowTemplate>
                @foreach (var field in Context.Fields)
                {
                    <MudTd DataLabel="@field.DisplayName">
                        @if (field.Template is not null)
                        {
                            @field.Template(context)
                        }
                        else if (field.Type == typeof(bool))
                        {
                            <MudCheckBox Checked="@field.ValueFunc(context)" ReadOnly Color="Color.Secondary"></MudCheckBox>
                        }
                        else
                        {
                            if (field.Color is not null)
                            {
                                var color = field.Color(context);

                                if (color != null)
                                {
                                    var colorValue = color.Value;
                                    var style = $"color:{colorValue};";

                                    <MudText Style="@style">
                                        <MudHighlighter Text="@field.ValueFunc(context)?.ToString()" Style="@style" HighlightedText="@SearchString"/>
                                    </MudText>
                                }
                                else
                                {
                                    <MudHighlighter Text="@field.ValueFunc(context)?.ToString()" HighlightedText="@SearchString"/>
                                }
                            }
                            else
                            {
                                <MudHighlighter Text="@field.ValueFunc(context)?.ToString()" HighlightedText="@SearchString"/>
                            }
                        }
                    </MudTd>
                }

                @{
                    var tdWith = ExtraActions != null && HasActions ? "text-align: right; width: 310px;" : "text-align: right; ";
                }
                @if (!HideActionsColumn)
                {
                    <MudTd DataLabel="Actions" Style="@tdWith">
                        @if (ActionsContent is not null && !HasActions)
                        {
                            @ActionsContent(context)
                        }

                        @if (HasActions || ExtraActions is not null)
                        {
                            if (ActionsContent is not null)
                            {
                                @ActionsContent(context)
                            }

                            var canEditEntity = CanUpdateEntity(context);
                            var canDeleteEntity = CanDeleteEntity(context);
                            var canViewEntity = CanViewEntity(context);
                            var hasExtraActions = ExtraActions is not null;

                            if (canEditEntity || canDeleteEntity || canViewEntity || hasExtraActions && !HideActionsColumn)
                            {
                                <MudMenu Label="@L["Actions"]" Variant="Variant.Filled" DisableElevation="true"
                                         EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.BottomLeft">
                                    @if (canEditEntity)
                                    {
                                        if (LoadEditPage(context))
                                        {
                                            <MudMenuItem @onclick="@(() => InvokeEditPage(context))">@L["Edit"]</MudMenuItem>
                                        }
                                        else
                                        {
                                            <MudMenuItem @onclick="@(() => InvokeModal(context))">@L["Edit"]</MudMenuItem>
                                        }
                                    }
                                    else if (canViewEntity)
                                    {
                                        <MudMenuItem @onclick="@(() => InvokeModal(context))">@L["View"]</MudMenuItem>
                                    }
                                    @if (canDeleteEntity)
                                    {
                                        <MudMenuItem Style="color:red!important" @onclick="@(() => Delete(context))">@L["Delete"]</MudMenuItem>
                                    }
                                    @if (ExtraActions is not null)
                                    {
                                        @ExtraActions(context)
                                    }
                                </MudMenu>
                            }
                        }
                        else if (HasExtraActions && !HideActionsColumn)
                        {
                            <MudMenu Label="@L["Actions"]" Variant="Variant.Filled" DisableElevation="true"
                                     EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info"  AnchorOrigin="Origin.BottomLeft">
                                @if (ExtraActions is not null)
                                {
                                    @ExtraActions(context)
                                }
                            </MudMenu>
                        }
                    </MudTd>
                }
            </RowTemplate>

            <PagerContent>
                <TablePager/>
            </PagerContent>

        </MudTable>

    </ChildContent>
    <ErrorContent Context="Exception">
        <TravaloudCustomError ExceptionMessage="@Exception.Message"/>
    </ErrorContent>
</ErrorBoundary>