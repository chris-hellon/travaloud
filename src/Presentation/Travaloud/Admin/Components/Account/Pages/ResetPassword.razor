@page "/account/reset-password"

@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.WebUtilities

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<ResetPassword> L

<PageTitle>Reset password</PageTitle>

<div class="d-flex justify-center">
    <MudImage Src="@(TenantInfo?.LogoImageUrl ?? "https://ik.imagekit.io/rqlzhe7ko/travaloud-logo.webp?ik-sdk-version=javascript-1.4.3&updatedAt=1677654151281")" Height="120"/>
</div>
<div class="d-flex justify-center">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-3" Align="Align.Center">@TenantInfo?.Name</MudText>
</div>
<div class="fsh-center-text">
    <MudText Typo="Typo.h5" GutterBottom="true">Reset Password</MudText>
    <MudText>
        @L["Enter your credentials to get started."]
    </MudText>
</div>

<br/>

<EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="resetpassword">
    <MudGrid>
        <DataAnnotationsValidator/>
        <StatusMessage Message="@Message"></StatusMessage>
        
        <MudItem xs="12">
            <div class="mud-input-control mud-input-input-control">
                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-outlined">
                        <InputText @bind-Value="Input.Email" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="username" aria-required="true" placeholder="Email"/>
                        <div class="mud-input-adornment mud-input-adornment-end"></div>
                        <div class="mud-input-outlined-border"></div>
                    </div>
                </div>
            </div>
            
            <ValidationMessage For="() => Input.Email" class="text-danger"/>
        </MudItem>
        <MudItem xs="12">
            <div class="mud-input-control mud-input-input-control">
                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-outlined">
                        <InputText @bind-Value="Input.Password" type="password"s class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="Password"/>
                        <div class="mud-input-adornment mud-input-adornment-end"></div>
                        <div class="mud-input-outlined-border"></div>
                    </div>
                </div>
            </div>
            
            <ValidationMessage For="() => Input.Password" class="text-danger"/>
        </MudItem>
        <MudItem xs="12">
            <div class="mud-input-control mud-input-input-control">
                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-outlined">
                        <InputText @bind-Value="Input.ConfirmPassword" type="password"s class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="password" aria-required="true" placeholder="Confirm Password"/>
                        <div class="mud-input-adornment mud-input-adornment-end"></div>
                        <div class="mud-input-outlined-border"></div>
                    </div>
                </div>
            </div>
            
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton ButtonType="ButtonType.Submit" Disabled="BusySubmitting" Variant="Variant.Filled"
                       Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Style="width: 100%;">
                @L["Reset"]
            </MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public bool BusySubmitting { get; set; }

    [CascadingParameter] private TravaloudTenantInfo? TenantInfo { get; set; }

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("account/reset-password-confirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("account/reset-password-confirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }

}