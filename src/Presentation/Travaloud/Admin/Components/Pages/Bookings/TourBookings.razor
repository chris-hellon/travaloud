@page "/bookings/tour-bookings"
@using Travaloud.Application.Catalog.Bookings.Dto
@using Travaloud.Admin.Components.Pages.Bookings.Common

@attribute [MustHavePermission(TravaloudAction.View, TravaloudResource.TourBookings)]

@inject IStringLocalizer<TourBookings> L

<TravaloudPageTitle Title="@L["Tour Bookings"]" Description="@L["Manage Tour Bookings."]"/>

<EntityTable @ref="_table" TEntity="BookingDto" TId="DefaultIdType" TRequest="TourBookingViewModel" Context="@Context" ModalWidth="MaxWidth.Large">
    <AdvancedSearchContent>
        <MudDateRangePicker AutoClose="true" @ref="_bookingDateRangePicker" PickerVariant="PickerVariant.Dialog" Label="@L["Filter by Booking Date Range"]" @bind-DateRange="SearchBookingDateRange" Clearable="true">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _bookingDateRangePicker.Clear())">@L["Clear"]</MudButton>
                <MudButton OnClick="@(() => _bookingDateRangePicker.Close(false))">@L["Cancel"]</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => _bookingDateRangePicker.Close())">@L["Ok"]</MudButton>
            </PickerActions>
        </MudDateRangePicker>

        <MudDateRangePicker AutoClose="true" @ref="_tourDateRangePicker" PickerVariant="PickerVariant.Dialog" Label="@L["Filter by Tour Departure Date Range"]" @bind-DateRange="SearchTourStartDateRange" Clearable="true">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _tourDateRangePicker.Clear())">@L["Clear"]</MudButton>
                <MudButton OnClick="@(() => _tourDateRangePicker.Close(false))">@L["Cancel"]</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => _tourDateRangePicker.Close())">@L["Ok"]</MudButton>
            </PickerActions>
        </MudDateRangePicker>

        @if (Tours is {Count: > 0})
        {
            <MudSelect T="DefaultIdType?" @bind-Value="SearchTourId" Label="Filter by Tour" Clearable="true">
                @foreach (var tour in Tours)
                {
                    <MudSelectItem T="DefaultIdType?" Value="tour.Id">@tour.Name</MudSelectItem>
                }
            </MudSelect>
        }
    </AdvancedSearchContent>

    <EditFormContent>
        <TourBookingEditForm RequestModel="@context" Context="@Context"></TourBookingEditForm>
    </EditFormContent>

    <ExtraActions>
        @if (context.IsPaid == false && (!context.Refunded.HasValue || !context.Refunded.Value) && (!context.Cancelled.HasValue || !context.Cancelled.Value))
        {
            <MudMenuItem OnClick="@(() => GenerateBookingQrCode(context.Id, context.GuestEmail))">@L["Generate Payment QR"]</MudMenuItem>
            <MudMenuItem OnClick="@(() => GeneratePaymentEmail(context.Id, context.GuestEmail))">@L["Send Payment Email"]</MudMenuItem>
        }
        else if (context.IsPaid && CanRefund && (!context.Cancelled.HasValue || !context.Cancelled.Value))
        {
            <MudMenuItem Style="color:red!important" OnClick="@(() => Refund(context.Id))">@L["Refund"]</MudMenuItem>
            <MudMenuItem Style="color:red!important" OnClick="@(() => DeleteAndRefund(context.Id))">@L["Cancel"]</MudMenuItem>
        }
    </ExtraActions>

    <ActionsContent>
        <MudButton Variant="Variant.Filled" DisableElevation="true" Style="margin-right:10px; margin-top:-4px;" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info"
                   OnClick="@(() => ShowBookingItems(context))">
            @((context.ShowDetails == true) ? L["Hide"] : L["Show"]) @L["Details"]
        </MudButton>
    </ActionsContent>

    <ChildRowContent>
        <TourBookingItemsTable RequestModel="@context" Context="@Context"></TourBookingItemsTable>
    </ChildRowContent>
</EntityTable>

<MudMessageBox @ref="AdditionalChargeMessageBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        <MudText Class="mb-2">
            @($"This will flag the current booking as unpaid, and require the guest to pay an additional amount of ${RefundAmount}.")
        </MudText>
        <MudText>Would you like to proceed?</MudText>
    </MessageContent>
    <YesButton>
        <MudButton StartIcon="@Icons.Material.Filled.Check" Color="Color.Primary" Variant="Variant.Filled" Class="ms-2">@L["Proceed"]</MudButton>
    </YesButton>
    <CancelButton>
        <MudButton StartIcon="@Icons.Material.Filled.Cancel">@L["Cancel"]</MudButton>
    </CancelButton>
</MudMessageBox>