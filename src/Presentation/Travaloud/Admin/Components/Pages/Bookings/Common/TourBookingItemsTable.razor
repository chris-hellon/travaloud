@using Microsoft.IdentityModel.Tokens
@using Org.BouncyCastle.Ocsp
@using Travaloud.Application.Catalog.Bookings.Dto
@using Travaloud.Application.Common.Extensions
@using Travaloud.Application.Identity.Users

@inject IStringLocalizer<TourBookingEditForm> L

@if (RequestModel.ShowDetails)
{
    if (RequestModel.Items?.Any() == true)
    {
        <MudTr>
            <td colspan="8">
                <MudCard Elevation="25" style="margin: 10px !important;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            @if (!string.IsNullOrEmpty(RequestModel.AdditionalNotes))
                            {
                                <MudAlert Severity="Severity.Info" Class="mb-3">@L["Notes"] : <strong>@RequestModel.AdditionalNotes</strong></MudAlert>
                            }
                            
                            @if (RequestModel.AmountOutstanding.HasValue && RequestModel.AmountOutstanding.Value > 0)
                            {
                                <MudAlert Severity="Severity.Warning" Class="mb-3">@L["Amount Outstanding"] : <strong>@($"$ {RequestModel.AmountOutstanding:n2}")</strong></MudAlert>
                            }
                         
                            <MudAlert Icon="@Icons.Material.Filled.Person" Severity="Severity.Success" Class="mb-3">
                                @L["Booked By"] : <strong>@(RequestModel.GuestId == RequestModel.CreatedBy.ToString() || RequestModel.StaffName.IsNullOrEmpty() ? "Direct from Website" : RequestModel.StaffName)</strong>
                                @if (!string.IsNullOrEmpty(RequestModel.BookingSource))
                                {
                                    <br/>
                                    @((MarkupString) $"{L["Booking Source"]} : <strong>{@RequestModel.BookingSource}</strong>")
                                }
                            </MudAlert>
                            <MudAlert Icon="@Icons.Material.Filled.PersonOutline" Severity="Severity.Normal" Class="mb-3">@L["Primary Guest"] : <strong>@GetUserDetailsLabel(RequestModel.PrimaryGuest)</strong></MudAlert>
                            @* <MudAlert Severity="Severity.Normal">@L["Items for Booking"] : <strong>@RequestModel.Description</strong></MudAlert> *@
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable Items="@RequestModel.Items.Where(x => x.TourId.HasValue)" Context="ItemContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                            <ColGroup>
                                <col/>
                                <col/>
                                <col/>
                                <col/>
                                <col/>
                                <col/>
                                <col/>
                                <col/>
                                <col/>
                            </ColGroup>
                            <HeaderContent>
                                <MudTh>Tour</MudTh>
                                <MudTh>Guests</MudTh>
                                <MudTh>Start Date</MudTh>
                                <MudTh>End Date</MudTh>
                                <MudTh>Pick Up Location</MudTh>
                                <MudTh Style="width:90px;">Price</MudTh>
                                <MudTh>Total Price</MudTh>
                                <MudTh>Waiver Signed</MudTh>
                                @* <MudTh></MudTh> *@
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Tour">@ItemContext.Tour?.Name</MudTd>
                                <MudTd DataLabel="Additional Guests">@ItemContext.Guests.Count</MudTd>
                                <MudTd DataLabel="Start Date">@ItemContext.StartDate</MudTd>
                                <MudTd DataLabel="End Date">@ItemContext.EndDate</MudTd>
                                <MudTd DataLabel="End Date">@ItemContext.PickupLocation</MudTd>
                                <MudTd DataLabel="Price">@($"$ {string.Format("{0:n2}", ItemContext.Amount)}")</MudTd>
                                <MudTd DataLabel="Total Price">@($"$ {string.Format("{0:n2}", ItemContext.Amount * ItemContext.Guests.Count)}")</MudTd>
                                <MudTd DataLabel="Waiver Signed">@(ItemContext.WaiverSigned.HasValue && ItemContext.WaiverSigned.Value ? "Yes" : "No")</MudTd>
                                <MudTd DataLabel="Actions" Style="@(ItemContext.Guests.Count > 0 ? "width:195px;" : "")">
                                    @if (ItemContext.Guests.Count > 0)
                                    {
                                        <MudButton Variant="Variant.Filled" OnClick="@(() => ShowBookingItemGuests(ItemContext))" DisableElevation="true" Style="margin-right:10px; margin-top:-4px;" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info">
                                            @((ItemContext.ShowGuestDetails) ? L["Hide"] : L["Show"]) @L["Guests"]
                                        </MudButton>
                                    }
                                </MudTd>
                            </RowTemplate>
                            <ChildRowContent>
                                @if (ItemContext.ShowGuestDetails)
                                {
                                    <MudTr>
                                        <td colspan="7">
                                            <MudTable Items="@ItemContext.Guests" Context="GuestContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                                <ColGroup>
                                                    <col/>
                                                    <col/>
                                                    <col/>
                                                    <col/>
                                                    <col/>
                                                    <col/>
                                                    <col/>
                                                </ColGroup>
                                                <HeaderContent>
                                                    <MudTh>Guest Name</MudTh>
                                                    <MudTh>Date of Birth</MudTh>
                                                    <MudTh>Nationality</MudTh>
                                                    <MudTh>Gender</MudTh>
                                                    <MudTh>Email</MudTh>
                                                    <MudTh>Status</MudTh>
                                                </HeaderContent>
                                                <RowTemplate>
                                                    <MudTd DataLabel="Guest Name">@GuestContext.FullName</MudTd>
                                                    <MudTd DataLabel="Date of Birth">@(GuestContext.DateOfBirth.HasValue ? GuestContext.DateOfBirth.Value.ToShortDateString() : "-")</MudTd>
                                                    <MudTd DataLabel="Nationality">@GuestContext.Nationality?.TwoLetterCodeToCountry()</MudTd>
                                                    <MudTd DataLabel="Gender">@GuestContext.Gender?.GenderMatch()</MudTd>
                                                    <MudTd DataLabel="Email">@GuestContext.Email</MudTd>
                                                    <MudTd DataLabel="Status">@GuestContext.Status</MudTd>
                                                </RowTemplate>
                                            </MudTable>
                                        </td>
                                    </MudTr>
                                }
                            </ChildRowContent>
                        </MudTable>

                        @if (RequestModel.Items.Any(x => x.PropertyId.HasValue))
                        {
                            <MudTable Items="@RequestModel.Items.Where(x => x.PropertyId.HasValue)" Context="ItemContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                <ColGroup>
                                    <col/>
                                    <col/>
                                    <col/>
                                    <col/>
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Property</MudTh>
                                    <MudTh>Check In Date</MudTh>
                                    <MudTh>Check Out Date</MudTh>
                                    <MudTh>Rooms Booked</MudTh>
                                    <MudTh>Cloudbeds Reservation Id</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Property">@ItemContext.Property?.Name</MudTd>
                                    <MudTd DataLabel="Check In Date">@ItemContext.StartDate.ToShortDateString()</MudTd>
                                    <MudTd DataLabel="Check Out Date">@ItemContext.EndDate.ToShortDateString()</MudTd>
                                    <MudTd DataLabel="Rooms Booked">@ItemContext.RoomQuantity</MudTd>
                                    <MudTd DataLabel="Cloudbeds Reservation Id">@ItemContext.CloudbedsReservationId</MudTd>
                                    <MudTd>
                                        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBookingItemRooms(ItemContext, RequestModel))">@((ItemContext.ShowDetails == true) ? "Hide" : "Show") Rooms</MudButton>
                                    </MudTd>
                                </RowTemplate>
                                <ChildRowContent>
                                    @if (ItemContext.ShowDetails)
                                    {
                                        <MudTr>
                                            <td colspan="4">
                                                <MudTable Items="@ItemContext.Rooms" Context="RoomContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                                    <ColGroup>
                                                        <col/>
                                                        <col/>
                                                        <col/>
                                                        <col/>
                                                        <col/>
                                                    </ColGroup>
                                                    <HeaderContent>
                                                        <MudTh>Room Name</MudTh>
                                                        <MudTh>Check In Date</MudTh>
                                                        <MudTh>Check Out Date</MudTh>
                                                        <MudTh>Guest</MudTh>
                                                        <MudTh>Total Nights</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate>
                                                        <MudTd DataLabel="Room Name">@RoomContext.RoomName</MudTd>
                                                        <MudTd DataLabel="Start Date">@RoomContext.CheckInDate.ToShortDateString()</MudTd>
                                                        <MudTd DataLabel="End Date">@RoomContext.CheckOutDate.ToShortDateString()</MudTd>
                                                        <MudTd DataLabel="Guest">@RoomContext.GuestFirstName @RoomContext.GuestLastName</MudTd>
                                                        <MudTd DataLabel="Total Nights">@RoomContext.Nights</MudTd>
                                                    </RowTemplate>
                                                </MudTable>
                                            </td>
                                        </MudTr>
                                    }
                                </ChildRowContent>
                            </MudTable>
                        }
                    </MudCardContent>
                </MudCard>
            </td>
        </MudTr>
    }
    else
    {
        <MudTr>
            <td colspan="5">
                <MudCard Elevation="25" style="margin: 10px !important;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudAlert Severity="Severity.Info" Typo="Typo.body1">@L["No Items available for Booking"] : <strong>@RequestModel.Description</strong></MudAlert>
                        </CardHeaderContent>
                    </MudCardHeader>
                </MudCard>
            </td>
        </MudTr>
    }
}

@code {
    [Parameter] public required BookingDto RequestModel { get; set; }

    [Parameter] public EntityServerTableContext<BookingDto, DefaultIdType, TourBookingViewModel> Context { get; set; }

    private static void ShowBookingItemRooms(BookingItemDetailsDto request, BookingDto bookingItem)
    {
        request.ShowDetails = !request.ShowDetails;
        if (bookingItem.Items == null) return;
        foreach (var otherTrail in bookingItem.Items.Where(x => x.Id != request.Id))
        {
            otherTrail.ShowDetails = false;
        }
    }

    private static void ShowBookingItemGuests(BookingItemDetailsDto request)
    {
        request.ShowGuestDetails = !request.ShowGuestDetails;
    }

    private string GetUserDetailsLabel(UserDto e)
    {
        var details = new List<string>
        {
            $"{e.FirstName} {e.LastName}"
        };

        if (e.DateOfBirth.HasValue)
        {
            details.Add(e.DateOfBirth.Value.ToShortDateString());
        }

        if (!string.IsNullOrEmpty(e.Gender))
        {
            details.Add(e.Gender.GenderMatch());
        }

        if (!string.IsNullOrEmpty(e.Nationality))
        {
            details.Add(e.Nationality.TwoLetterCodeToCountry());
        }

        if (e.Email != null) details.Add(e.Email);

        return string.Join(" - ", details);
    }
}