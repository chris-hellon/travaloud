@page "/management/tours"
@using Travaloud.Application.Catalog.Tours.Dto
@using Travaloud.Application.Catalog.Tours.Commands

@attribute [MustHavePermission(TravaloudAction.View, TravaloudResource.Tours)]

@inject IStringLocalizer<Tours> L

<TravaloudPageTitle Title="@L["Tours"]" Description="@L["Manage Tours."]"/>

<EntityTable @ref="_table" TEntity="TourDto" TId="Guid" TRequest="TourViewModel" Context="@Context" IsWizard="true" WizardSteps="@WizardSteps">
<WizardStep1Content>
    <MudGrid>
        <MudItem xs="12" md="5">
            <MudTextField Label="@L["Name"]" For="@(() => context.Name)" @bind-Value="context.Name" Required="true" HelperText="Enter a Tour name" Variant="Variant.Outlined"/>
        </MudItem>

        <MudItem xs="12" md="5">
            <div class="d-flex" style="align-items:baseline">
                @if (_canViewDestinations)
                {
                    <MudSelect T="TourDestinationLookupRequest" Label="Destination" @bind-SelectedValues="@context.SelectedDestinations" MultiSelection="true" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
                        @foreach (var destination in context.Destinations)
                        {
                            <MudSelectItem Value="@destination"/>
                        }
                    </MudSelect>
                }
                else if (context.UseTourGroup)
                {
                    <MudSelect T="Guid?" Label="Tour Group" Required="context.UseTourGroup" Variant="Variant.Outlined" @bind-Value="context.TourCategoryId" Clearable="true" For="@(() => context.TourCategoryId)" HelperText="Does this Tour belong to a group?">
                        @if (context.TourCategories != null)
                        {
                            foreach (var tourCategory in context.TourCategories)
                            {
                                <MudSelectItem T="Guid?" Value="@tourCategory.Id">@tourCategory.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
                else
                {
                    <MudSelect T="string" MultiSelection="true" Required="context.UseTourGroup" Label="Tour Category" Clearable="true" Variant="Variant.Outlined" @bind-Value="context.SelectedParentTourCategoriesString" SelectAll="true" @bind-SelectedValues="@context.TourCategoriesOptions" For="@(() => context.SelectedParentTourCategoriesString)" HelperText="Does this Tour belong to a category?">
                        @if (context.ParentTourCategories != null)
                        {
                            foreach (var tourCategory in context.ParentTourCategories)
                            {
                                <MudSelectItem T="string" Value="@tourCategory.Name" @key="@tourCategory.Id">@tourCategory.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }

                @if (_canViewTourGroups)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Style="height:50px; margin-left:20px;" OnClick="@(() => ToggleTourGroup(context))">@(context.UseTourGroup ? "Use Category" : "Use Group")</MudButton>
                }
            </div>
        </MudItem>

        <MudItem xs="12" md="2">
            <MudSwitch @bind-Checked="@context.PublishToSite" Color="Color.Primary" Label="Publish to Website?" LabelPosition="LabelPosition.Start"/>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["Address"]" For="@(() => context.Address)" @bind-Value="context.Address" HelperText="Enter an Address" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["Telephone Number"]" InputType="InputType.Telephone" For="@(() => context.TelephoneNumber)" @bind-Value="context.TelephoneNumber" HelperText="Enter a Telephone Number" Variant="Variant.Outlined"/>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12" md="4">
            <MudTextField Label="@L["Day Duration"]" For="@(() => context.DayDuration)" @bind-Value="context.DayDuration" HelperText="Enter a Day Duration eg. 3" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudTextField Label="@L["Night Duration"]" For="@(() => context.NightDuration)" @bind-Value="context.NightDuration" HelperText="Enter a Night Duration eg. 2" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudTextField Label="@L["Hour Duration"]" For="@(() => context.HourDuration)" @bind-Value="context.HourDuration" HelperText="Enter an Hour Duration eg. 1-1.5" Variant="Variant.Outlined"/>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12" md="3">
            <MudTextField Label="@L["Minimum Capacity"]" Required="true" InputType="InputType.Number" For="@(() => context.MinCapacity)" @bind-Value="context.MinCapacity" HelperText="Enter a Min Pax Capacity" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudTextField Label="@L["Maximum Capacity"]" InputType="InputType.Number" For="@(() => context.MaxCapacity)" @bind-Value="context.MaxCapacity" HelperText="Enter a Max Pax Capacity" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["Additional Information"]" For="@(() => context.AdditionalInformation)" @bind-Value="context.AdditionalInformation" HelperText="eg. Incl. Resort Stay & Choice of Tour/Activity" Variant="Variant.Outlined"/>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12" md="12">
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Outlined="true">
                <MudTabPanel Text="@L["What's Included?"]">
                    <Editor @bind-Value="context.WhatsIncluded" Field="@(() => context.WhatsIncluded)" Conf="@TinyMceConfig.Styles()" ApiKey="@TinyMceConfig.ApiKey"></Editor>
                </MudTabPanel>
                <MudTabPanel Text="@L["What's not Included? / Add On Services"]">
                    <Editor @bind-Value="context.WhatsNotIncluded" Field="@(() => context.WhatsNotIncluded)" Conf="@TinyMceConfig.Styles()" ApiKey="@TinyMceConfig.ApiKey"></Editor>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
</WizardStep1Content>
<WizardStep2Content>
    <MudGrid>
        <MudItem xs="12" md="12">
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Outlined="true">
                <MudTabPanel Text="@L["Short Description"]">
                    <Editor @bind-Value="context.ShortDescription" Field="@(() => context.ShortDescription)" Conf="@TinyMceConfig.Styles()" ApiKey="@TinyMceConfig.ApiKey"></Editor>
                </MudTabPanel>
                <MudTabPanel Text="@L["Full Description"]">
                    <Editor @bind-Value="context.Description" Field="@(() => context.Description)" Conf="@TinyMceConfig.Styles()" ApiKey="@TinyMceConfig.ApiKey"></Editor>
                </MudTabPanel>
                <MudTabPanel Text="@L["Booking Confirmation Email"]">
                    <Editor @bind-Value="context.BookingConfirmationEmailDetails" Field="@(() => context.BookingConfirmationEmailDetails)" Conf="@TinyMceConfig.Styles()" ApiKey="@TinyMceConfig.ApiKey"></Editor>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
</WizardStep2Content>
<WizardStep3Content>
    @if (context.TourPrices == null || !context.TourPrices.Any())
    {
        <MudButton DisableElevation Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokePriceDialog(new TourPriceRequest(), context, true))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="mb-2">@L["Add New Price"]</MudButton>
    }
    else
    {
        <MudTable T="TourPriceRequest" @ref="_pricesTable" Style="table-layout:auto; padding:0px !important;" Items="@context.TourPrices" Context="priceContext" Hover="false" HorizontalScrollbar="true" Elevation="0" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" CanCancelEdit="true" ReadOnly="false">
            <ToolBarContent>
                <MudButton DisableElevation Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokePriceDialog(new TourPriceRequest(), context, true))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="mb-2">@L["Add New Price"]</MudButton>
            </ToolBarContent>
            <ColGroup>
                <col/>
                <col/>
                <col/>
                <col/>
                <col/>
                <col/>
                <col/>
                <col/>
                <col/>
                <col style="width:20px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Price</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Day Duration</MudTh>
                <MudTh>Night Duration</MudTh>
                <MudTh>Hour Duration</MudTh>
                <MudTh>Month From</MudTh>
                <MudTh>Month To</MudTh>
                <MudTh>Commission Amount</MudTh>
                <MudTh Style="min-width: 0; width: 100px; text-align: right;"></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Price">$@priceContext.Price</MudTd>
                <MudTd DataLabel="Title">@priceContext.Title</MudTd>
                <MudTd DataLabel="Description">@priceContext.Description</MudTd>
                <MudTd DataLabel="Day Duration">@priceContext.DayDuration</MudTd>
                <MudTd DataLabel="Night Duration">@priceContext.NightDuration</MudTd>
                <MudTd DataLabel="Hour Duration">@priceContext.HourDuration</MudTd>
                <MudTd DataLabel="Month From">@priceContext.MonthFrom</MudTd>
                <MudTd DataLabel="Month To">@priceContext.MonthTo</MudTd>
                <MudTd DataLabel="Comission Amount">$@priceContext.ComissionAmount</MudTd>
                <MudTd DataLabel="Edit" Style="min-width: 0; width: 270px; text-align: right;">
                    <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick="(() => InvokePriceDialog(priceContext, context))">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="(() => RemovePriceRow(context, priceContext.Id))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }

</WizardStep3Content>
<WizardStep4Content>
    @if (context.TourDates == null || !context.TourDates.Any())
    {
        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="(() => InvokeDateDialog(new TourDateRequest(), context, true))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="mb-2">@L["Add New Date"]</MudButton>
    }
    else
    {
        <MudTable T="TourDateRequest" @ref="_datesTable" Style="table-layout: auto; padding: 0px !important;" Elevation="0" Items="@context.TourDates" Context="dateContext" Hover="false" HorizontalScrollbar="true" Breakpoint="Breakpoint.Sm" ReadOnly="false">
            <ToolBarContent>
                <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="(() => InvokeDateDialog(new TourDateRequest(), context, true))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="mb-2">@L["Add New Date"]</MudButton>
            </ToolBarContent>
            <ColGroup>
                <col/>
                <col/>
                <col/>
                <col style="width:20px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Start Date</MudTh>
                <MudTh>End Date</MudTh>
                <MudTh>Price</MudTh>
                <MudTh Style="min-width: 0; width: 270px; text-align: right;"></MudTh>
            </HeaderContent>
            <RowTemplate>
                @{
                    var startDate = dateContext.StartDate.HasValue ? dateContext.StartDate.Value.ToShortDateString() : "-";
                    var endDate = dateContext.EndDate.HasValue ? dateContext.EndDate.Value.ToShortDateString() : "-";

                    var startTime = "-";
                    var endTime = "-";

                    if (dateContext.StartTime.HasValue)
                    {
                        startTime = dateContext.StartTime.Value.ToString();
                    }
                    else if (dateContext.StartDate.HasValue)
                    {
                        startTime = dateContext.StartDate.Value.TimeOfDay.ToString();
                        dateContext.StartTime = dateContext.StartDate.Value.TimeOfDay;
                    }

                    if (dateContext.EndTime.HasValue)
                    {
                        endTime = dateContext.EndTime.Value.ToString();
                    }
                    else if (dateContext.EndDate.HasValue)
                    {
                        endTime = dateContext.EndDate.Value.TimeOfDay.ToString();
                        dateContext.EndTime = dateContext.EndDate.Value.TimeOfDay;
                    }

                    <MudTd DataLabel="Start Date">@startDate @startTime</MudTd>
                    <MudTd DataLabel="End Date">@endDate @endTime</MudTd>
                    <MudTd DataLabel="Price">@(dateContext.PriceOverride.HasValue ? dateContext.PriceOverride.Value : context.TourPrices != null && context.TourPrices.FirstOrDefault(x => x.Id == dateContext.TourPriceId) != null ? context.TourPrices.First(x => x.Id == dateContext.TourPriceId).Price : "-")</MudTd>
                    <MudTd DataLabel="Edit" Style="min-width: 0; width: 270px; text-align: right;">
                        <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick="(() => InvokeDateDialog(dateContext, context))">Edit</MudButton>
                        <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="(() => RemoveDateRow(context, dateContext.Id))">Delete</MudButton>
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    }
</WizardStep4Content>
<WizardStep5Content>
    @if (context.TourItineraries == null || !context.TourItineraries.Any())
    {
        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="(() => InvokeItineraryDialog(new TourItineraryRequest(), context, true))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="mb-2">@L["Add New Itinerary"]</MudButton>
    }
    else
    {
        <MudTable T="TourItineraryRequest" @ref="_itinerariesTable" Style="table-layout: auto; padding: 0px !important;" Elevation="0" Items="@context.TourItineraries" Context="intineraryContext" Hover="false" HorizontalScrollbar="true" Breakpoint="Breakpoint.Sm" ReadOnly="false">
            <ToolBarContent>
                <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="(() => InvokeItineraryDialog(new TourItineraryRequest(), context, true))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="mb-2">@L["Add New Itinerary"]</MudButton>
            </ToolBarContent>
            <ColGroup>
                <col/>
                <col/>
                <col/>
                <col style="width:20px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Header</MudTh>
                <MudTh>Title</MudTh>
                <MudTh Style="min-width: 0; width: 270px; text-align: right;"></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Header">@intineraryContext.Header</MudTd>
                <MudTd DataLabel="Title">@intineraryContext.Title</MudTd>
                <MudTd DataLabel="Edit" Style="min-width: 0; width: 270px; text-align: right;">
                    <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick="(() => InvokeItineraryDialog(intineraryContext, context))">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="(() => RemoveItineraryRow(context, intineraryContext.Id))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</WizardStep5Content>
<WizardStep6Content>
    <MudGrid>
        <MudItem xs="12" md="12">
            <MudTextField Label="@L["Meta Keywords"]" For="@(() => context.MetaKeywords)" @bind-Value="context.MetaKeywords" HelperText="Enter Meta Keywords (recommended max limit of 20)" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" md="12">
            <MudTextField Label="@L["Meta Description"]" Lines="5" For="@(() => context.MetaDescription)" @bind-Value="context.MetaDescription" HelperText="Enter a Meta Description" Variant="Variant.Outlined"/>
        </MudItem>
    </MudGrid>
</WizardStep6Content>
<WizardStep7Content>
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudStack>
                <MudItem xs="12" md="12">
                    <div>
                        <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.CloudUpload" for="fileInput">
                            @L["Select Banner Image"]
                        </MudButton>
                        @if (Context.AddEditModal != null && !Context.AddEditModal.IsCreate && !string.IsNullOrEmpty(context.ImagePath) && string.IsNullOrEmpty(context.ImageInBytes))
                        {
                            <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Target="_blank"
                                       StartIcon="@Icons.Material.Filled.RemoveRedEye" Link="@(context.ImagePath)" Style="margin-left: 5px;">
                                @L["View"]
                            </MudButton>

                            <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                       StartIcon="@Icons.Material.Filled.Delete" OnClick="SetDeleteCurrentImageFlag" Style="margin-left: 5px;">
                                @L["Delete"]
                            </MudButton>
                        }
                        @if (!string.IsNullOrEmpty(context.ImageInBytes))
                        {
                            <MudButton HtmlTag="label" DisableElevation OnClick="ClearImageInBytes" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Target="_blank"
                                       StartIcon="@Icons.Material.Filled.Clear" Style="margin-left: 5px;">
                                @L["Clear"]
                            </MudButton>
                        }
                    </div>
                    <InputFile id="fileInput" hidden OnChange="UploadFiles"/>
                </MudItem>
                <MudItem xs="12" md="12">
                    @if (!string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudImage Src="@context.ImageInBytes" Square="true" Elevation="25" Class="rounded-lg" Style="height: auto; max-width: 100%; max-height: 100%"> </MudImage>
                    }
                    else
                    {
                        <MudImage Src="@(string.IsNullOrEmpty(@context.ImagePath) ? string.Empty : (@context.ImagePath))" Elevation="25" Class="rounded-lg" Square="true" Style="height: auto; max-width: 100%; max-height: 100%"> </MudImage>
                    }
                </MudItem>
            </MudStack>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudStack>
                <MudItem xs="12" md="12">
                    <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.CloudUpload" for="slideshowImageFileInput">
                        @L["Add Slideshow Image"]
                    </MudButton>
                    <InputFile id="slideshowImageFileInput" hidden OnChange="UploadSlideshowImage"/>
                </MudItem>
                <MudItem xs="12" md="12">
                    @if (context.Images != null)
                    {
                        <MudGrid>
                            @foreach (var image in context.Images)
                            {
                                @if (!string.IsNullOrEmpty(image.ImagePath) || !string.IsNullOrEmpty(image.ImageInBytes))
                                {
                                    <MudItem xs="12" md="6" Style="height:220px;">
                                        @if (!string.IsNullOrEmpty(image.ImageInBytes))
                                        {
                                            <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%; height:85%;" Src="@image.ImageInBytes" Alt="Örebro Slott" Elevation="25" Class="rounded-lg"/>
                                        }
                                        else
                                        {
                                            <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%; height:85%;" Src="@image.ImagePath" Alt="Örebro Slott" Elevation="25" Class="rounded-lg"/>
                                        }

                                        @if (image != context.Images.First())
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleLeft" OnClick="@(() => SetSlideshowImagesSortOrder(image))" Color="Color.Primary" aria-label="left" Style="margin-right: 5px;"></MudIconButton>
                                        }

                                        @if (!string.IsNullOrEmpty(image.ImageInBytes))
                                        {
                                            <MudButton HtmlTag="label" DisableElevation OnClick="@(() => ClearSlideshowImageInBytes(image))" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Target="_blank"
                                                       StartIcon="@Icons.Material.Filled.Clear" Style="margin-left: 5px;">
                                                @L["Clear"]
                                            </MudButton>
                                        }
                                        else
                                        {
                                            <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Target="_blank"
                                                       StartIcon="@Icons.Material.Filled.RemoveRedEye" Link="@(image.ImagePath)" Style="margin-left: 5px;">
                                                @L["View"]
                                            </MudButton>

                                            <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                                       StartIcon="@Icons.Material.Filled.Delete" OnClick="@(() => SetDeleteSlideshowImageFlag(image))" Style="margin-left: 5px;">
                                                @L["Delete"]
                                            </MudButton>
                                        }

                                        @if (image != context.Images.Last())
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight" OnClick="@(() => SetSlideshowImagesSortOrder(image, true))" Color="Color.Primary" aria-label="right" Style="margin-left: 5px;"></MudIconButton>
                                        }
                                    </MudItem>
                                }
                            }
                        </MudGrid>
                    }
                </MudItem>
            </MudStack>
        </MudItem>
    </MudGrid>
</WizardStep7Content>
</EntityTable>