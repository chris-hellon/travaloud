@using Travaloud.Application.Catalog.Tours.Dto
@using Travaloud.Application.Catalog.Tours.Commands
@using Travaloud.Admin.Components.Dialogs
@using System.Text.Json

@inject IStringLocalizer<Tours> L        

@if (Tour.TourItineraries == null || !Tour.TourItineraries.Any())
{
    <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="(() => InvokeItineraryDialog(new TourItineraryRequest(), Tour, true))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="mb-2">@L["Add New Itinerary"]</MudButton>
}
else
{
    <MudTable T="TourItineraryRequest" Style="table-layout: auto; padding: 0px !important;" Elevation="0" Items="@Tour.TourItineraries" Context="intineraryContext" Hover="false" HorizontalScrollbar="true" Breakpoint="Breakpoint.Sm" ReadOnly="false">
        <ToolBarContent>
            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="(() => InvokeItineraryDialog(new TourItineraryRequest(), Tour, true))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="mb-2">@L["Add New Itinerary"]</MudButton>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col/>
            <col style="width:20px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Header</MudTh>
            <MudTh>Title</MudTh>
            <MudTh Style="min-width: 0; width: 270px; text-align: right;"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Header">@intineraryContext.Header</MudTd>
            <MudTd DataLabel="Title">@intineraryContext.Title</MudTd>
            <MudTd DataLabel="Edit" Style="min-width: 0; width: 270px; text-align: right;">
                <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick="(() => InvokeItineraryDialog(intineraryContext, Tour))">Edit</MudButton>
                <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="(() => RemoveItineraryRow(Tour, intineraryContext.Id))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter] public required TourViewModel Tour { get; set; }
    [Parameter] public required EntityServerTableContext<TourDto, DefaultIdType, TourViewModel> Context { get; set; } = default!;

    private async Task InvokeItineraryDialog(TourItineraryRequest requestModel, TourViewModel tour, bool isCreate = false)
    {
        if (isCreate)
        {
            (requestModel.Sections ??= new List<TourItinerarySectionRequest>()).Add(new TourItinerarySectionRequest());
        }

        var initialModel = JsonSerializer.Deserialize<IList<TourItineraryRequest>>(JsonSerializer.Serialize(tour.TourItineraries)) ?? new List<TourItineraryRequest>();
        DialogOptions options = new() {CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true, DisableBackdropClick = true};
        DialogParameters parameters = new()
        {
            {nameof(Dialogs.WebsiteManagement.Tours.TourItinerary.RequestModel), requestModel},
            {nameof(Dialogs.WebsiteManagement.Tours.TourItinerary.Tour), tour},
            {nameof(Dialogs.WebsiteManagement.Tours.TourItinerary.Context), Context},
            {nameof(Dialogs.WebsiteManagement.Tours.TourItinerary.Id), isCreate ? null : requestModel.Id}
        };

        var dialog = await DialogService.ShowAsync<Dialogs.WebsiteManagement.Tours.TourItinerary>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            tour.TourItineraries = initialModel;
        }

        Context.AddEditModal?.ForceRender();
    }

    private async Task RemoveItineraryRow(TourViewModel tour, DefaultIdType id)
    {
        string deleteContent =
            L[
                "You're sure you want to delete this {0}? Please note, this is not final. Refresh the page if you've made a mistake."];
        var parameters = new DialogParameters
        {
            {nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, "Itinerary", id)}
        };

        DialogOptions options = new()
            {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true};
        var dialog = await DialogService.ShowAsync<DeleteConfirmation>(L["Delete"], parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var tourItinerary = tour.TourItineraries?.FirstOrDefault(x => x.Id == id);
            if (tourItinerary != null)
            {
                tour.TourItineraries?.Remove(tourItinerary);
            }

            Context.AddEditModal?.ForceRender();
        }
    }


}