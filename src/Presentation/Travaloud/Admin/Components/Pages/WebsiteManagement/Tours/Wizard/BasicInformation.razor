@using Travaloud.Application.Catalog.Tours.Commands
@using Travaloud.Application.Catalog.Tours.Dto
@using Travaloud.Application.Catalog.Interfaces
@using Travaloud.Application.Catalog.Properties.Dto
@using Travaloud.Application.Catalog.Properties.Queries
@using MudExRichTextEditor.Types

@inject IStringLocalizer<Tours> L

<MudGrid>
    <MudItem xs="12" md="5">
        <MudTextField Label="@L["Name"]" For="@(() => Tour.Name)" @bind-Value="Tour.Name" Required="true" HelperText="Enter a Tour name" Variant="Variant.Outlined"/>
    </MudItem>

    <MudItem xs="12" md="5">
        <div class="d-flex" style="align-items:baseline">
            @if (CanViewTourGroups)
            {
                if (Tour.UseTourGroup)
                {
                    <MudSelect T="Guid?" Label="Tour Group" Required="Tour.UseTourGroup" Variant="Variant.Outlined" @bind-Value="Tour.TourCategoryId" Clearable="true" For="@(() => Tour.TourCategoryId)" HelperText="Does this Tour belong to a group?">
                        @if (Tour.TourCategories != null)
                        {
                            foreach (var tourCategory in Tour.TourCategories)
                            {
                                <MudSelectItem T="Guid?" Value="@tourCategory.Id">@tourCategory.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
                else
                {
                    <MudSelect T="string" MultiSelection="true" Label="Tour Category" Clearable="true" Variant="Variant.Outlined" @bind-Value="Tour.SelectedParentTourCategoriesString" SelectAll="true" @bind-SelectedValues="@Tour.TourCategoriesOptions" For="@(() => Tour.SelectedParentTourCategoriesString)" HelperText="Does this Tour belong to a category?">
                        @if (Tour.ParentTourCategories != null)
                        {
                            foreach (var tourCategory in Tour.ParentTourCategories)
                            {
                                <MudSelectItem T="string" Value="@tourCategory.Name" @key="@tourCategory.Id">@tourCategory.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
                
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Style="height:50px; margin-left:20px;" OnClick="@(() => ToggleTourGroup(Tour))">@(Tour.UseTourGroup ? "Use Category" : "Use Group")</MudButton>
            }
            else
            {
                <MudSelect T="TourCategoryRequest?" Label="Tour Category" Clearable="true" Variant="Variant.Outlined" @bind-Value="Tour.TourCategory" For="@(() => Tour.TourCategory)" HelperText="Does this Tour belong to a category?">
                    @if (Tour.ParentTourCategories != null)
                    {
                        foreach (var tourCategory in Tour.ParentTourCategories)
                        {
                        <MudSelectItem Value="@tourCategory"/>
                        }
                    }
                </MudSelect>
            }
        </div>
    </MudItem>

    <MudItem xs="12" md="2">
        <MudSwitch @bind-Checked="@Tour.PublishToSite" Color="Color.Primary" Label="Publish to Website?" LabelPosition="LabelPosition.Start"/>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" md="4">
        <MudSelect T="TourDestinationLookupRequest" HelperText="Select a Location" Required="true" Label="Location" @bind-SelectedValues="@Tour.SelectedDestinations" MultiSelection="true" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
            @if (Tour.Destinations != null)
            {
                foreach (var destination in Tour.Destinations)
                {
                    <MudSelectItem Value="@destination"/>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudSelect T="TourPickupLocationRequest" HelperText="Select Pick Up Location(s)" Required="true" Label="Pick Up Location(s)" @bind-SelectedValues="@Tour.SelectedPickupLocations" MultiSelection="true" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
            @if (Tour.PickupLocations != null)
            {
                foreach (var pickupLoction in Tour.PickupLocations)
                {
                    <MudSelectItem Value="@pickupLoction"/>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudTextField Label="@L["Telephone Number"]" InputType="InputType.Telephone" For="@(() => Tour.TelephoneNumber)" @bind-Value="Tour.TelephoneNumber" HelperText="Enter a Telephone Number" Variant="Variant.Outlined"/>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" md="4">
        <MudTextField Label="@L["Day Duration"]" For="@(() => Tour.DayDuration)" @bind-Value="Tour.DayDuration" HelperText="Enter a Day Duration eg. 3" Variant="Variant.Outlined"/>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudTextField Label="@L["Night Duration"]" For="@(() => Tour.NightDuration)" @bind-Value="Tour.NightDuration" HelperText="Enter a Night Duration eg. 2" Variant="Variant.Outlined"/>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudTextField Label="@L["Hour Duration"]" For="@(() => Tour.HourDuration)" @bind-Value="Tour.HourDuration" HelperText="Enter an Hour Duration eg. 1-1.5" Variant="Variant.Outlined"/>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" md="3">
        <MudTextField Label="@L["Minimum Capacity"]" Required="true" InputType="InputType.Number" For="@(() => Tour.MinCapacity)" @bind-Value="Tour.MinCapacity" HelperText="Enter a Min Pax Capacity" Variant="Variant.Outlined"/>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudTextField Label="@L["Maximum Capacity"]" InputType="InputType.Number" For="@(() => Tour.MaxCapacity)" @bind-Value="Tour.MaxCapacity" HelperText="Enter a Max Pax Capacity" Variant="Variant.Outlined"/>
    </MudItem>
    <MudItem xs="12" md="6">
        <MudTextField Label="@L["Additional Information"]" For="@(() => Tour.AdditionalInformation)" @bind-Value="Tour.AdditionalInformation" HelperText="eg. Incl. Resort Stay & Choice of Tour/Activity" Variant="Variant.Outlined"/>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" md="12">
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Outlined="true">
            <MudTabPanel Text="@L["Short Description"]">
                <MudExRichTextEdit @bind-Value="Tour.ShortDescription" For="@(() => Tour.ShortDescription)" BackgroundColor="MudExColor.Transparent"/>
            </MudTabPanel>
            <MudTabPanel Text="@L["Full Description"]">
                <MudExRichTextEdit @bind-Value="Tour.Description" For="@(() => Tour.Description)" Required="true" BackgroundColor="MudExColor.Transparent" Theme="QuillTheme.Snow"/>
            </MudTabPanel>
            <MudTabPanel Text="@L["What's Included?"]">
                <MudExRichTextEdit @bind-Value="Tour.WhatsIncluded" For="@(() => Tour.WhatsIncluded)" BackgroundColor="MudExColor.Transparent"/>
            </MudTabPanel>
            <MudTabPanel Text="@L["What's not Included? / Add On Services"]">
                <MudExRichTextEdit @bind-Value="Tour.WhatsNotIncluded" For="@(() => Tour.WhatsNotIncluded)" BackgroundColor="MudExColor.Transparent"/>
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public required TourViewModel Tour { get; set; }
    [Parameter] public required bool CanViewTourGroups { get; set; }
    [Parameter] public required bool CanViewTourCategories { get; set; }
    [Parameter] public required EntityServerTableContext<TourDto, DefaultIdType, TourViewModel> Context { get; set; } = default!;
    
    private void ToggleTourGroup(TourViewModel context)
    {
        context.UseTourGroup = !context.UseTourGroup;

        if (context.UseTourGroup)
        {
            context.SelectedParentTourCategoriesString = string.Empty;
            context.SelectedParentTourCategories = new List<Guid>();
            context.TourCategoriesOptions = null;
        }
        else
        {
            context.TourCategoryId = null;
        }

        StateHasChanged();
        Context.AddEditModal?.ForceRender();
    }
}